{
    "docs": [
        {
            "location": "/", 
            "text": "Goals\n\n\nDesingn and develop a framework for people who works in robotics.", 
            "title": "Home"
        }, 
        {
            "location": "/#goals", 
            "text": "Desingn and develop a framework for people who works in robotics.", 
            "title": "Goals"
        }, 
        {
            "location": "/development/", 
            "text": "Overview\n\n\nWe use Docker Compose to run complex multi container apps on a device that runs linux ( Raspberry Pi, X64).\n\n\nDeploy\n\n\nOur multi-container deploy solution has the following structure:\n\n\n\n\nAs we can see, the containers has different kind of services:\n\n\n\n\nROS node\n\n\nnode-red\n\n\nrosbridge\n\n\netc  \n\n\n\n\nUsing node red\n\n\nIn one hand we have ROS that his nodes makes his communication using roscore (that is the core service). Over roscore the nodes that are registered comunicates each other using tipics and services. \nOn the other hand we have Node-Red that offer a web page to make flows. To post messages on ROS topics we can make a node-red node that uses the roslibjs to comunicate via websocket using rosbridge. Using this concept a node-red node can use topics or services that ROS publish. \n\n\nExample\n\n\nIn the following image we can see an example of a talker node that recives of an input node \"2222\" and publishes into the topic /st and then a listener node that is subscrived on the /st topic and debug the recived message on the debugger console.\n\n\nThe node-red module is: \n\n\nnode-red-contrib-ros\n\n\nThe flow is: \n\n\nflow.json\n\n\n[{\nid\n:\nf31cee7d.0ce31\n,\ntype\n:\nros-server\n,\nz\n:\na1c6eb3b.5e3918\n,\nurl\n:\nws://localhost:9090/\n},{\nid\n:\nb44e0788.4bb1f8\n,\ntype\n:\ninject\n,\nz\n:\na1c6eb3b.5e3918\n,\nname\n:\n,\ntopic\n:\n,\npayload\n:\n2222\n,\npayloadType\n:\nstr\n,\nrepeat\n:\n,\ncrontab\n:\n,\nonce\n:false,\nx\n:111.5,\ny\n:232,\nwires\n:[[\nc2a8605a.3d57a\n]]},{\nid\n:\nbbb8147a.4447e8\n,\ntype\n:\nros-subscribe\n,\nz\n:\na1c6eb3b.5e3918\n,\nserver\n:\nf31cee7d.0ce31\n,\ntopicname\n:\n/st\n,\nx\n:112.5,\ny\n:129,\nwires\n:[[\nb8bcdc13.47432\n]]},{\nid\n:\nb8bcdc13.47432\n,\ntype\n:\ndebug\n,\nz\n:\na1c6eb3b.5e3918\n,\nname\n:\n,\nactive\n:true,\nconsole\n:\nfalse\n,\ncomplete\n:\ntrue\n,\nx\n:333.5,\ny\n:163,\nwires\n:[]},{\nid\n:\nc2a8605a.3d57a\n,\ntype\n:\nros-publish\n,\nz\n:\na1c6eb3b.5e3918\n,\nserver\n:\nf31cee7d.0ce31\n,\ntopicname\n:\n/st\n,\nmsgtype\n:\nstd_msgs/String\n,\nx\n:288.5,\ny\n:264,\nwires\n:[]}]\n\n\n\n\nnode-red web\n\n\n\n\nStep 1: start the services\n\n\ndocker-compose up\n\n\n\n\nStep 2: look for the node-red url\n\n\ndocker inspect \ncontainer\n\n\n\n\nStep 3: Execute the flow in node-red and check that is sending messages over ROS", 
            "title": "Work"
        }, 
        {
            "location": "/development/#overview", 
            "text": "We use Docker Compose to run complex multi container apps on a device that runs linux ( Raspberry Pi, X64).", 
            "title": "Overview"
        }, 
        {
            "location": "/development/#deploy", 
            "text": "Our multi-container deploy solution has the following structure:   As we can see, the containers has different kind of services:   ROS node  node-red  rosbridge  etc", 
            "title": "Deploy"
        }, 
        {
            "location": "/development/#using-node-red", 
            "text": "In one hand we have ROS that his nodes makes his communication using roscore (that is the core service). Over roscore the nodes that are registered comunicates each other using tipics and services. \nOn the other hand we have Node-Red that offer a web page to make flows. To post messages on ROS topics we can make a node-red node that uses the roslibjs to comunicate via websocket using rosbridge. Using this concept a node-red node can use topics or services that ROS publish.", 
            "title": "Using node red"
        }, 
        {
            "location": "/development/#example", 
            "text": "In the following image we can see an example of a talker node that recives of an input node \"2222\" and publishes into the topic /st and then a listener node that is subscrived on the /st topic and debug the recived message on the debugger console.  The node-red module is:   node-red-contrib-ros  The flow is:   flow.json  [{ id : f31cee7d.0ce31 , type : ros-server , z : a1c6eb3b.5e3918 , url : ws://localhost:9090/ },{ id : b44e0788.4bb1f8 , type : inject , z : a1c6eb3b.5e3918 , name : , topic : , payload : 2222 , payloadType : str , repeat : , crontab : , once :false, x :111.5, y :232, wires :[[ c2a8605a.3d57a ]]},{ id : bbb8147a.4447e8 , type : ros-subscribe , z : a1c6eb3b.5e3918 , server : f31cee7d.0ce31 , topicname : /st , x :112.5, y :129, wires :[[ b8bcdc13.47432 ]]},{ id : b8bcdc13.47432 , type : debug , z : a1c6eb3b.5e3918 , name : , active :true, console : false , complete : true , x :333.5, y :163, wires :[]},{ id : c2a8605a.3d57a , type : ros-publish , z : a1c6eb3b.5e3918 , server : f31cee7d.0ce31 , topicname : /st , msgtype : std_msgs/String , x :288.5, y :264, wires :[]}]  node-red web", 
            "title": "Example"
        }, 
        {
            "location": "/development/#step-1-start-the-services", 
            "text": "docker-compose up", 
            "title": "Step 1: start the services"
        }, 
        {
            "location": "/development/#step-2-look-for-the-node-red-url", 
            "text": "docker inspect  container", 
            "title": "Step 2: look for the node-red url"
        }, 
        {
            "location": "/development/#step-3-execute-the-flow-in-node-red-and-check-that-is-sending-messages-over-ros", 
            "text": "", 
            "title": "Step 3: Execute the flow in node-red and check that is sending messages over ROS"
        }, 
        {
            "location": "/continuous_integrity/", 
            "text": "Overview", 
            "title": "Continuous delivery"
        }, 
        {
            "location": "/continuous_integrity/#overview", 
            "text": "", 
            "title": "Overview"
        }, 
        {
            "location": "/demos/", 
            "text": "Prerequisites\n\n\n1. Install and configure \nDocker\n\n\n2. Get the code\n\n\ngit clone https://github.com/cocheok/robotics_devops.git\n\n\n\n\nConfiguration\n\n\n1. Build ros-base image\n\n\ncd ros\ndocker build -t ros_base .\ncd ..\n\n\n\n\n2. Build nodered image\n\n\ncd nodered_base\ndocker build -t nodered_base .\ncd ..\n\n\n\n\nTalker Listener example\n\n\nThis is example has the following structure:\n\n\n\n1. Run the talker-listener example\n\n\ncd demos/talker-listener\ndocker-compose up            \n\n\n\n\n2. Look for node-red url\n\n\nIn another window \n\n\n2.1 List the docker containers\n\n\ndocker ps\n\n\n\n\nThere are one that has the node_red in his name (The node-red container has a name like talkerlistener_nodered_1).\n\n\n2.2 Inspect the node-red container and get the url\n\n\nreplace the \n with the node-red container of the step 2.1 \n\n\ndocker inspect \nnode-red container\n\n\n\n\n\n3 Use node-red\n\n\nOpen your browser and put the ip obtained on the point 2.2. The service is running on port 1880.\nThe topic that is used by the talker node is \n/chatter\n \n\n\n3.1 Consume messages from \n/chatter\n topic\n\n\n3.1.1 Put the \nROS sub\n node from the input section and the \ndebug\n node from the output section on the board and connect them\n\n\n\n\n3.1.2 Configure \nROS sub\n node with the following content:\n\n\n-ROS Server:  \nws://rosbridge:9090\n\n\n-Topic: \n/chatter\n\n\n3.1.3 Configure debug:\n\n\n\n\nOutput: complete msg object \n\n\n\n\n3.1.4 Click on \nDeploy\n and see messages on debug tab\n\n\n3.2 Publish messages on \n/chatter\n topic\n\n\n3.2.1 Put the \nROS pub\n node from the output section and the \ninject\n node from the input section on the board and connect them\n\n\n\n\n3.2.2 Configure \nROS pub\n node with the following content:\n\n\n\n\n\n\nROS Server:  \nws://rosbridge:9090\n\n\n\n\n\n\nTopic: \n/chatter\n\n\n\n\n\n\n3.1.3 Configure inject:\n\n\n\n\nOn Payload select type string and put the text \"Test from node-red\"\n\n\n\n\n3.1.4 Click on \nDeploy\n, then on the blue button of inject and see messages on debug tab", 
            "title": "Demos"
        }, 
        {
            "location": "/demos/#prerequisites", 
            "text": "", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/demos/#1-install-and-configure-docker", 
            "text": "", 
            "title": "1. Install and configure Docker"
        }, 
        {
            "location": "/demos/#2-get-the-code", 
            "text": "git clone https://github.com/cocheok/robotics_devops.git", 
            "title": "2. Get the code"
        }, 
        {
            "location": "/demos/#configuration", 
            "text": "", 
            "title": "Configuration"
        }, 
        {
            "location": "/demos/#1-build-ros-base-image", 
            "text": "cd ros\ndocker build -t ros_base .\ncd ..", 
            "title": "1. Build ros-base image"
        }, 
        {
            "location": "/demos/#2-build-nodered-image", 
            "text": "cd nodered_base\ndocker build -t nodered_base .\ncd ..", 
            "title": "2. Build nodered image"
        }, 
        {
            "location": "/demos/#talker-listener-example", 
            "text": "This is example has the following structure:", 
            "title": "Talker Listener example"
        }, 
        {
            "location": "/demos/#1-run-the-talker-listener-example", 
            "text": "cd demos/talker-listener\ndocker-compose up", 
            "title": "1. Run the talker-listener example"
        }, 
        {
            "location": "/demos/#2-look-for-node-red-url", 
            "text": "In another window", 
            "title": "2. Look for node-red url"
        }, 
        {
            "location": "/demos/#21-list-the-docker-containers", 
            "text": "docker ps  There are one that has the node_red in his name (The node-red container has a name like talkerlistener_nodered_1).", 
            "title": "2.1 List the docker containers"
        }, 
        {
            "location": "/demos/#22-inspect-the-node-red-container-and-get-the-url", 
            "text": "replace the   with the node-red container of the step 2.1   docker inspect  node-red container", 
            "title": "2.2 Inspect the node-red container and get the url"
        }, 
        {
            "location": "/demos/#3-use-node-red", 
            "text": "Open your browser and put the ip obtained on the point 2.2. The service is running on port 1880.\nThe topic that is used by the talker node is  /chatter", 
            "title": "3 Use node-red"
        }, 
        {
            "location": "/demos/#31-consume-messages-from-chatter-topic", 
            "text": "", 
            "title": "3.1 Consume messages from /chatter topic"
        }, 
        {
            "location": "/demos/#311-put-the-ros-sub-node-from-the-input-section-and-the-debug-node-from-the-output-section-on-the-board-and-connect-them", 
            "text": "", 
            "title": "3.1.1 Put the ROS sub node from the input section and the debug node from the output section on the board and connect them"
        }, 
        {
            "location": "/demos/#312-configure-ros-sub-node-with-the-following-content", 
            "text": "-ROS Server:   ws://rosbridge:9090  -Topic:  /chatter", 
            "title": "3.1.2 Configure ROS sub node with the following content:"
        }, 
        {
            "location": "/demos/#313-configure-debug", 
            "text": "Output: complete msg object", 
            "title": "3.1.3 Configure debug:"
        }, 
        {
            "location": "/demos/#314-click-on-deploy-and-see-messages-on-debug-tab", 
            "text": "", 
            "title": "3.1.4 Click on Deploy and see messages on debug tab"
        }, 
        {
            "location": "/demos/#32-publish-messages-on-chatter-topic", 
            "text": "", 
            "title": "3.2 Publish messages on /chatter topic"
        }, 
        {
            "location": "/demos/#321-put-the-ros-pub-node-from-the-output-section-and-the-inject-node-from-the-input-section-on-the-board-and-connect-them", 
            "text": "", 
            "title": "3.2.1 Put the ROS pub node from the output section and the inject node from the input section on the board and connect them"
        }, 
        {
            "location": "/demos/#322-configure-ros-pub-node-with-the-following-content", 
            "text": "ROS Server:   ws://rosbridge:9090    Topic:  /chatter", 
            "title": "3.2.2 Configure ROS pub node with the following content:"
        }, 
        {
            "location": "/demos/#313-configure-inject", 
            "text": "On Payload select type string and put the text \"Test from node-red\"", 
            "title": "3.1.3 Configure inject:"
        }, 
        {
            "location": "/demos/#314-click-on-deploy-then-on-the-blue-button-of-inject-and-see-messages-on-debug-tab", 
            "text": "", 
            "title": "3.1.4 Click on Deploy, then on the blue button of inject and see messages on debug tab"
        }, 
        {
            "location": "/about/", 
            "text": "Contact", 
            "title": "About"
        }, 
        {
            "location": "/about/#contact", 
            "text": "", 
            "title": "Contact"
        }
    ]
}
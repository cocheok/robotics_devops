{
    "docs": [
        {
            "location": "/", 
            "text": "Goals\n\n\nDesingn and develop a framework for people who works in robotics.", 
            "title": "Home"
        }, 
        {
            "location": "/#goals", 
            "text": "Desingn and develop a framework for people who works in robotics.", 
            "title": "Goals"
        }, 
        {
            "location": "/development/", 
            "text": "Overview\n\n\nWe use Docker Compose to run complex multi container apps on a device that runs linux ( Raspberry Pi, X64).\n\n\nDeploy\n\n\nOur multi-container deploy solution has the following structure:\n\n\n\n\nAs we can see, the containers has different kind of services:\n\n\n\n\nROS node\n\n\nnode-red\n\n\nrosbridge\n\n\netc  \n\n\n\n\nUsing node red\n\n\nIn one hand we have ROS that his nodes makes his communication using roscore (that is the core service). Over roscore the nodes that are registered comunicates each other using tipics and services. \nOn the other hand we have Node-Red that offer a web page to make flows. To post messages on ROS topics we can make a node-red node that uses the roslibjs to comunicate via websocket using rosbridge. Using this concept a node-red node can use topics or services that ROS publish. \n\n\nExample\n\n\nIn the following image we can see an example of a talker node that recives of an input node \"2222\" and publishes into the topic /st and then a listener node that is subscrived on the /st topic and debug the recived message on the debugger console.\n\n\nThe node-red module is: \n\nnode-red-contrib-ros\n\n\nThe flow is: \n\n\n[{\nid\n:\nf31cee7d.0ce31\n,\ntype\n:\nros-server\n,\nz\n:\na1c6eb3b.5e3918\n,\nurl\n:\nws://localhost:9090/\n},{\nid\n:\nb44e0788.4bb1f8\n,\ntype\n:\ninject\n,\nz\n:\na1c6eb3b.5e3918\n,\nname\n:\n,\ntopic\n:\n,\npayload\n:\n2222\n,\npayloadType\n:\nstr\n,\nrepeat\n:\n,\ncrontab\n:\n,\nonce\n:false,\nx\n:111.5,\ny\n:232,\nwires\n:[[\nc2a8605a.3d57a\n]]},{\nid\n:\nbbb8147a.4447e8\n,\ntype\n:\nros-subscribe\n,\nz\n:\na1c6eb3b.5e3918\n,\nserver\n:\nf31cee7d.0ce31\n,\ntopicname\n:\n/st\n,\nx\n:112.5,\ny\n:129,\nwires\n:[[\nb8bcdc13.47432\n]]},{\nid\n:\nb8bcdc13.47432\n,\ntype\n:\ndebug\n,\nz\n:\na1c6eb3b.5e3918\n,\nname\n:\n,\nactive\n:true,\nconsole\n:\nfalse\n,\ncomplete\n:\ntrue\n,\nx\n:333.5,\ny\n:163,\nwires\n:[]},{\nid\n:\nc2a8605a.3d57a\n,\ntype\n:\nros-publish\n,\nz\n:\na1c6eb3b.5e3918\n,\nserver\n:\nf31cee7d.0ce31\n,\ntopicname\n:\n/st\n,\nmsgtype\n:\nstd_msgs/String\n,\nx\n:288.5,\ny\n:264,\nwires\n:[]}]\n\n\n\n\nStep 1: start the services\n\n\ndocker-compose up\n\n\n\n\nStep 2: look for the node-red url\n\n\ndocker inspect \ncontainer\n\n\n\n\nStep 3: Execute the flow in node-red and check that is sending messages over ROS", 
            "title": "Work"
        }, 
        {
            "location": "/development/#overview", 
            "text": "We use Docker Compose to run complex multi container apps on a device that runs linux ( Raspberry Pi, X64).", 
            "title": "Overview"
        }, 
        {
            "location": "/development/#deploy", 
            "text": "Our multi-container deploy solution has the following structure:   As we can see, the containers has different kind of services:   ROS node  node-red  rosbridge  etc", 
            "title": "Deploy"
        }, 
        {
            "location": "/development/#using-node-red", 
            "text": "In one hand we have ROS that his nodes makes his communication using roscore (that is the core service). Over roscore the nodes that are registered comunicates each other using tipics and services. \nOn the other hand we have Node-Red that offer a web page to make flows. To post messages on ROS topics we can make a node-red node that uses the roslibjs to comunicate via websocket using rosbridge. Using this concept a node-red node can use topics or services that ROS publish.", 
            "title": "Using node red"
        }, 
        {
            "location": "/development/#example", 
            "text": "In the following image we can see an example of a talker node that recives of an input node \"2222\" and publishes into the topic /st and then a listener node that is subscrived on the /st topic and debug the recived message on the debugger console.  The node-red module is:  node-red-contrib-ros  The flow is:   [{ id : f31cee7d.0ce31 , type : ros-server , z : a1c6eb3b.5e3918 , url : ws://localhost:9090/ },{ id : b44e0788.4bb1f8 , type : inject , z : a1c6eb3b.5e3918 , name : , topic : , payload : 2222 , payloadType : str , repeat : , crontab : , once :false, x :111.5, y :232, wires :[[ c2a8605a.3d57a ]]},{ id : bbb8147a.4447e8 , type : ros-subscribe , z : a1c6eb3b.5e3918 , server : f31cee7d.0ce31 , topicname : /st , x :112.5, y :129, wires :[[ b8bcdc13.47432 ]]},{ id : b8bcdc13.47432 , type : debug , z : a1c6eb3b.5e3918 , name : , active :true, console : false , complete : true , x :333.5, y :163, wires :[]},{ id : c2a8605a.3d57a , type : ros-publish , z : a1c6eb3b.5e3918 , server : f31cee7d.0ce31 , topicname : /st , msgtype : std_msgs/String , x :288.5, y :264, wires :[]}]", 
            "title": "Example"
        }, 
        {
            "location": "/development/#step-1-start-the-services", 
            "text": "docker-compose up", 
            "title": "Step 1: start the services"
        }, 
        {
            "location": "/development/#step-2-look-for-the-node-red-url", 
            "text": "docker inspect  container", 
            "title": "Step 2: look for the node-red url"
        }, 
        {
            "location": "/development/#step-3-execute-the-flow-in-node-red-and-check-that-is-sending-messages-over-ros", 
            "text": "", 
            "title": "Step 3: Execute the flow in node-red and check that is sending messages over ROS"
        }, 
        {
            "location": "/continuous_integrity/", 
            "text": "Overview", 
            "title": "Continuous delivery"
        }, 
        {
            "location": "/continuous_integrity/#overview", 
            "text": "", 
            "title": "Overview"
        }, 
        {
            "location": "/about/", 
            "text": "Contact", 
            "title": "About"
        }, 
        {
            "location": "/about/#contact", 
            "text": "", 
            "title": "Contact"
        }
    ]
}